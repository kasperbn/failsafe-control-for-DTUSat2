#!/usr/bin/ruby
require 'rubygems'
require 'optparse'
require 'serialport'

options = {
	:device => "/dev/ttyUSB2",
	:baud => 9600,
	:data_bits => 8,
	:stop_bits => 1,
	:parity => SerialPort::NONE,
	:timeout => 2,
	:interactive => false
}

op = OptionParser.new do |opts|
  opts.banner = "Usage: fsserial [options] [XX XX XX XX]"
  opts.on("--device=DEVICE", String, "Device ('/dev/ttyUSB2')") {|o| options[:device] = o}
  opts.on("--baud=BAUD", Integer, "Baud (9600)") 								{|o| options[:baud] = o}
  opts.on("--data_bits=DATA_BITS", Integer, "Data Bits (8)") 		{|o| options[:data_bits] = o}
  opts.on("--stop_bits=STOP_BITS", Integer, "Stop Bits (1)") 		{|o| options[:stop_bits] = o}
  opts.on("--parity=PARITY", Integer, "Parity (None)") 					{|o| options[:parity] = o}
  opts.on("--timeout=TIMEOUT", Integer, "Timeout (2 seconds)") 	{|o| options[:timeout] = o}
  opts.on("-i","--interactive","Interactive mode (false)") 	{|o| options[:interactive] = true}
  opts.separator ""
  opts.separator "Common options:"
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version") do
		puts "Kasper BjÃ¸rn Nielsen (s052808@student.dtu.dk)"
    exit
  end
end
op.parse!

class FSSerial

	def initialize(options)
		@options = options
		@sp = SerialPort.new(options[:device], options[:baud], options[:data_bits], options[:stop_bits], options[:parity])
		if @options[:interactive]
			interactive_mode
		else
			single_mode
		end
	end

	private
	def interactive_mode
		loop do
			putc ">"
			putc " "
			req = $stdin.gets.gsub(/\n/,'').split(" ")  # Remove newline

			exit(0) if req.include?("exit")

			write_satellite(req)
			read_satellite
		end
	end

	def single_mode
		write_satellite(ARGV)
		read_satellite {exit(0)}
		exit(1)
	end

	def write_satellite(req)
		req.each do |s|
			@sp.putc s.hex
			sleep(0.1)
		end
	end

	def read_satellite()
		t = Thread.new do
			r = []
			4.times {r << @sp.getc}
			puts r.map {|c| c.to_i.to_s(16)}.join(" ")
			yield if block_given?
		end

		sleep(@options[:timeout])
		t.kill!
		puts "Timeout!"
	end

end

FSSerial.new(options)
